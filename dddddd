const puppeteer = require('puppeteer');
const XLSX      = require('xlsx');
const fs        = require('fs-extra');

/* ─────────────── USER SETTINGS ─────────────── */
const TWITTER_USERNAME = 'NBhadange10';
const TWITTER_PASSWORD = 'Nikita@10';

const MAX_TWEETS  = 1000;                    // how many rows to fetch
const PROFILE_URL = 'https://x.com/mastercard'; // any public profile URL
/* ───────────────────────────────────────────── */

function wait (ms) { return new Promise(res => setTimeout(res, ms)); }

/* derive the handle we’re interested in, e.g. “mastercard” */
const TARGET_HANDLE = PROFILE_URL
  .replace(/^https?:\/\/(twitter\.com|x\.com)\//i, '')
  .split('/')[0]
  .replace(/^@/, '')
  .toLowerCase();

async function loginToTwitter (page) {
  await page.goto('https://x.com/login', { waitUntil: 'networkidle2' });

  await page.waitForSelector('input[name="text"]');
  await page.type('input[name="text"]', TWITTER_USERNAME);
  await page.keyboard.press('Enter');
  await wait(2000);

  /* sometimes Twitter asks for the username twice */
  try {
    await page.waitForSelector('input[name="text"]', { timeout: 5000 });
    await page.type('input[name="text"]', TWITTER_USERNAME);
    await page.keyboard.press('Enter');
  } catch (_) {}

  await page.waitForSelector('input[name="password"]');
  await page.type('input[name="password"]', TWITTER_PASSWORD);
  await page.keyboard.press('Enter');

  await page.waitForNavigation({ waitUntil: 'networkidle2' });
}

(async () => {
  const browser = await puppeteer.launch({
    headless: false,
    args: ['--start-maximized'],
    defaultViewport: null
  });

  const page = await browser.newPage();
  await loginToTwitter(page);
  await page.goto(PROFILE_URL, { waitUntil: 'networkidle2' });

  const tweetsSeen = new Set();
  const results    = [];

  while (results.length < MAX_TWEETS) {

    /* scrape all <article> elements currently in DOM */
    const newTweets = await page.evaluate(() => {
      const out = [];
      document.querySelectorAll('article').forEach(node => {
        try {
          const urlElem   = node.querySelector('a[href*="/status/"]');
          const url       = urlElem?.href || '';
          const timestamp = urlElem?.querySelector('time')?.getAttribute('datetime') || '';
          const text      = node.querySelector('[data-testid="tweetText"]')?.innerText || '';

          /* stats: replies – retweets – likes – views */
          const s         = node.querySelectorAll('[data-testid="app-text-transition-container"]');
          const replies   = s[0]?.innerText || '0';
          const retweets  = s[1]?.innerText || '0';
          const likes     = s[2]?.innerText || '0';
          const views     = s[3]?.innerText || '0';

          /* author of the tweet itself */
          const anchor    = node.querySelector('a[href^="/"][role="link"]');
          const authorUsername = anchor ? anchor.getAttribute('href').split('/')[1] : '';

          /* “XYZ reposted” context */
          const socialCtx = node.querySelector('div[data-testid="socialContext"]')?.innerText || '';
          const isRepostByPage = / reposted$/i.test(socialCtx);

          out.push({
            url, timestamp, text, replies, retweets, likes, views,
            authorUsername, socialCtx, isRepostByPage
          });
        } catch (err) {
          console.error('Error parsing tweet:', err);
        }
      });
      return out;
    });

    /* process what we just grabbed */
    for (const t of newTweets) {

      if (!t.url || tweetsSeen.has(t.url)) continue;

      const isWrittenByTarget = t.authorUsername?.toLowerCase() === TARGET_HANDLE;
      const isRepostByTarget  = t.isRepostByPage &&
                                t.socialCtx.toLowerCase().includes(TARGET_HANDLE);

      if (!isWrittenByTarget && !isRepostByTarget) continue;  // skip anything else
      tweetsSeen.add(t.url);

      /* clean text, extract @mentions and #hashtags */
      const cleanedText = t.text.replace(/\n/g, ' ').trim();
      const mentions = [...cleanedText.matchAll(/@(\w{1,15})/g)].map(m => '@' + m[1]);
      const hashtags = [...cleanedText.matchAll(/#(\w+)/g)].map(h => '#' + h[1]);

      /* build record object */
      const record = {
        Date:            t.timestamp,
        AuthorUsername:  '@' + t.authorUsername,
        Text:            cleanedText,
        Replies:         t.replies,
        Retweets:        t.retweets,
        Likes:           t.likes,
        Views:           t.views,
        URL:             t.url
      };
      mentions.forEach((m, idx) => { record[`Mention${idx + 1}`]  = m; });
      hashtags.forEach((h, idx) => { record[`Hashtag${idx + 1}`] = h; });

      results.push(record);

      /* terminal output */
      console.log(
`────────── TWEET #${results.length} ──────────
URL        : ${record.URL}
Date/Time  : ${record.Date}
Author     : ${record.AuthorUsername}
Text       : ${record.Text}
Replies    : ${record.Replies}
Retweets   : ${record.Retweets}
Likes      : ${record.Likes}
Views      : ${record.Views}
Mentions   : ${mentions.join(', ') || 'None'}
Hashtags   : ${hashtags.join(', ') || 'None'}
──────────────────────────────────────────────\n`
      );

      if (results.length >= MAX_TWEETS) break;
    }

    /* scroll for more tweets if needed */
    if (results.length < MAX_TWEETS) {
      await page.evaluate(() => window.scrollBy(0, window.innerHeight));
      await wait(2500);
    }
  }

  /* write to Excel */
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename  = `${TARGET_HANDLE}_tweets_${timestamp}.xlsx`;

  const ws = XLSX.utils.json_to_sheet(results);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Tweets');
  XLSX.writeFile(wb, filename);

  console.log(`✅ Saved ${results.length} rows to ${filename}`);
  await browser.close();
})();
